{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\n/**\n * @title A contract for crowd funding\n * @author Mattia Papa\n * @notice This contract is a sample of a funding contract\n * @dev It implements PriceConverter as library\n */\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n    address private immutable i_owner;\n\n    address[] private s_funders;\n    mapping(address => uint256) private s_addressToAmountFunded;\n\n    AggregatorV3Interface private s_priceFeed;\n\n    modifier onlyOwner() {\n        if (msg.sender != i_owner) {\n            revert FundMe__NotOwner();\n        }\n        _;\n    }\n\n    error FundMe__NotOwner();\n    error NotEnoughEth();\n    error SendFailed();\n    error CallFailed();\n\n    constructor(address s_priceFeedAddress) {\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    /**\n     * @notice This function funds this contract\n     */\n    function fund() public payable {\n        if (msg.value.getConversionRate(s_priceFeed) <= MINIMUM_USD) {\n            revert NotEnoughEth();\n        }\n        s_funders.push(msg.sender);\n        s_addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    function getMinimumUsdInWei() public view returns (uint256) {\n        return PriceConverter.convertMinimumUsdToWei(MINIMUM_USD, s_priceFeed);\n    }\n\n    function cheaperWithdraw() public payable onlyOwner {\n        /// Gas optimization\n        address[] memory funders = s_funders;\n\n        for (uint256 i = 0; i < funders.length; i++) {\n            // reset the mapping by setting 0 the amount funded by any funder\n            s_addressToAmountFunded[funders[i]] = 0;\n        }\n\n        s_funders = new address[](0);\n\n        bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        if (!sendSuccess) {\n            revert SendFailed();\n        }\n    }\n\n    function withdraw() public onlyOwner {\n        for (uint256 i = 0; i < s_funders.length; i++) {\n            // reset the mapping by setting 0 the amount funded by any funder\n            s_addressToAmountFunded[s_funders[i]] = 0;\n        }\n\n        // reset s_funders array\n        s_funders = new address[](0);\n\n        // withdraw the funds\n        /// We can do this by using 3 different methods:\n        // 1. transfer\n        // 2. send\n        // 3. call\n\n        /// 1. transfer\n        // transfer automatically reverts if the transfer fails\n        payable(msg.sender).transfer(address(this).balance);\n        /// 2. send\n        // send revert only if we specify the require\n        bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        if (!sendSuccess) {\n            revert SendFailed();\n        }\n        /// 3. call\n        // call is a low level interaction\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        if (!callSuccess) {\n            revert CallFailed();\n        }\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getFunder(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    function getAddressToAmountFunded(\n        address funder\n    ) public view returns (uint256) {\n        return s_addressToAmountFunded[funder];\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    uint256 constant PRECISION = 1e18;\n\n    function decimals(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint8) {\n        return priceFeed.decimals();\n    }\n\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        (\n            ,\n            /* uint80 roundID */ int price /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/,\n            ,\n            ,\n\n        ) = priceFeed.latestRoundData();\n\n        // price is expressed as ETH in terms of USD\n        // so if ETH/USD is 3000$, `int price` will be 3000 + 1e8 = 3000_0000_0000\n        // if we want to return as uint256 we need to:\n        // 1. Multiply by 1e10 (the missing 10 decimals)\n        // 2. typecast int into uint256\n\n        return uint256(price * 1e10);\n    }\n\n    function getVersion(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        return priceFeed.version();\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        // Assuming a price of ETH/USD = 3000\n        // getPrice() = 3000 * 1e18\n        // ethAmount = 1 * 1e18\n        // We are returning (3000 * 1e18 * 1e18)/1e18 = 3000 * 1e18\n        return (getPrice(priceFeed) * ethAmount) / PRECISION;\n    }\n\n    function convertMinimumUsdToWei(\n        uint256 _minimumUsd,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        // Get the ETH price in USD (scaled to 1e18)\n        uint256 ethPrice = getPrice(priceFeed);\n\n        // Convert the minimum USD (already scaled to 1e18) to ETH by dividing by ETH price\n        // (minimumUsd * PRECISION) / ethPrice gives the equivalent ETH amount\n        uint256 ethAmountInWei = (_minimumUsd * PRECISION) / ethPrice;\n\n        return ethAmountInWei; // Return the amount in Wei\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}