{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "s_priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CallFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughEth",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SendFailed",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinimumUsdInWei",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbb6087e78054f5ea35fdd09212ee12abe1370aaca07fb072fa365f0ff278bc46",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1024439",
    "logsBloom": "0x
    "blockHash": "0x024859e998997c04fde3c66c0e56ee25d1900b5fd77b98c6c6a7eb4b7ec5da6b",
    "transactionHash": "0xbb6087e78054f5ea35fdd09212ee12abe1370aaca07fb072fa365f0ff278bc46",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1024439",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "b240fd5857ead82ba24fefe46e027c16",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SendFailed\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumUsdInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Mattia Papa\",\"details\":\"It implements PriceConverter as library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is a sample of a funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n/**\\n * @title A contract for crowd funding\\n * @author Mattia Papa\\n * @notice This contract is a sample of a funding contract\\n * @dev It implements PriceConverter as library\\n */\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n    address private immutable i_owner;\\n\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    error FundMe__NotOwner();\\n    error NotEnoughEth();\\n    error SendFailed();\\n    error CallFailed();\\n\\n    constructor(address s_priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     * @notice This function funds this contract\\n     */\\n    function fund() public payable {\\n        if (msg.value.getConversionRate(s_priceFeed) <= MINIMUM_USD) {\\n            revert NotEnoughEth();\\n        }\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function getMinimumUsdInWei() public view returns (uint256) {\\n        return PriceConverter.convertMinimumUsdToWei(MINIMUM_USD, s_priceFeed);\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        /// Gas optimization\\n        address[] memory funders = s_funders;\\n\\n        for (uint256 i = 0; i < funders.length; i++) {\\n            // reset the mapping by setting 0 the amount funded by any funder\\n            s_addressToAmountFunded[funders[i]] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n\\n        bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        if (!sendSuccess) {\\n            revert SendFailed();\\n        }\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (uint256 i = 0; i < s_funders.length; i++) {\\n            // reset the mapping by setting 0 the amount funded by any funder\\n            s_addressToAmountFunded[s_funders[i]] = 0;\\n        }\\n\\n        // reset s_funders array\\n        s_funders = new address[](0);\\n\\n        // withdraw the funds\\n        /// We can do this by using 3 different methods:\\n        // 1. transfer\\n        // 2. send\\n        // 3. call\\n\\n        /// 1. transfer\\n        // transfer automatically reverts if the transfer fails\\n        payable(msg.sender).transfer(address(this).balance);\\n        /// 2. send\\n        // send revert only if we specify the require\\n        bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        if (!sendSuccess) {\\n            revert SendFailed();\\n        }\\n        /// 3. call\\n        // call is a low level interaction\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        if (!callSuccess) {\\n            revert CallFailed();\\n        }\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x5294a73d1a42e6a7cb5e424ba14ea35622ffbe6d03ae947438154af71f88b8e5\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    uint256 constant PRECISION = 1e18;\\n\\n    function decimals(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint8) {\\n        return priceFeed.decimals();\\n    }\\n\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (\\n            ,\\n            /* uint80 roundID */ int price /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/,\\n            ,\\n            ,\\n\\n        ) = priceFeed.latestRoundData();\\n\\n        // price is expressed as ETH in terms of USD\\n        // so if ETH/USD is 3000$, `int price` will be 3000 + 1e8 = 3000_0000_0000\\n        // if we want to return as uint256 we need to:\\n        // 1. Multiply by 1e10 (the missing 10 decimals)\\n        // 2. typecast int into uint256\\n\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getVersion(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        return priceFeed.version();\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // Assuming a price of ETH/USD = 3000\\n        // getPrice() = 3000 * 1e18\\n        // ethAmount = 1 * 1e18\\n        // We are returning (3000 * 1e18 * 1e18)/1e18 = 3000 * 1e18\\n        return (getPrice(priceFeed) * ethAmount) / PRECISION;\\n    }\\n\\n    function convertMinimumUsdToWei(\\n        uint256 _minimumUsd,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // Get the ETH price in USD (scaled to 1e18)\\n        uint256 ethPrice = getPrice(priceFeed);\\n\\n        // Convert the minimum USD (already scaled to 1e18) to ETH by dividing by ETH price\\n        // (minimumUsd * PRECISION) / ethPrice gives the equivalent ETH amount\\n        uint256 ethAmountInWei = (_minimumUsd * PRECISION) / ethPrice;\\n\\n        return ethAmountInWei; // Return the amount in Wei\\n    }\\n}\\n\",\"keccak256\":\"0xe49ce73489848d56ea476f86eea86714940cf2dfc60ce0827cbf3bbf478fb96a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012a8380380620012a8833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111296200017f6000396000818161035e0152818161065601526106e201526111296000f3fe60806040526004361061008a5760003560e01c80639e87a5cd116100595780639e87a5cd1461014d578063ac8b521814610178578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101b757610099565b80630343fb25146100a35780633ccfd60b146100e05780636b69a592146100f7578063893d20e81461012257610099565b36610099576100976101f4565b005b6100a16101f4565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610ba0565b610313565b6040516100d79190610be6565b60405180910390f35b3480156100ec57600080fd5b506100f561035c565b005b34801561010357600080fd5b5061010c610645565b6040516101199190610be6565b60405180910390f35b34801561012e57600080fd5b50610137610652565b6040516101449190610c10565b60405180910390f35b34801561015957600080fd5b5061016261067a565b60405161016f9190610c8a565b60405180910390f35b34801561018457600080fd5b5061018d6106a4565b60405161019a9190610be6565b60405180910390f35b6101ab6101f4565b005b6101b56106e0565b005b3480156101c357600080fd5b506101de60048036038101906101d99190610cd1565b610942565b6040516101eb9190610c10565b60405180910390f35b6802b5e3af16b1880000610233600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461098990919063ffffffff16565b1161026a576040517ff14a42b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e1576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104865760006001600080848154811061040a57610409610cfe565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808061047e90610d5c565b9150506103e4565b50600067ffffffffffffffff8111156104a2576104a1610da5565b5b6040519080825280602002602001820160405280156104d05781602001602082028036833780820191505090505b50600090805190602001906104e6929190610a96565b503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561052d573d6000803e3d6000fd5b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505090508061059e576040517f81063e5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff16476040516105c490610e05565b60006040518083038185875af1925050503d8060008114610601576040519150601f19603f3d011682016040523d82523d6000602084013e610606565b606091505b5050905080610641576040517f3204506f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006106db6802b5e3af16b1880000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166109ba565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610765576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156107e857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161079e575b5050505050905060005b815181101561086d5760006001600084848151811061081457610813610cfe565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808061086590610d5c565b9150506107f2565b50600067ffffffffffffffff81111561088957610888610da5565b5b6040519080825280602002602001820160405280156108b75781602001602082028036833780820191505090505b50600090805190602001906108cd929190610a96565b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505090508061093e576040517f81063e5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b600080828154811061095757610956610cfe565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000670de0b6b3a76400008361099e846109f6565b6109a89190610e1a565b6109b29190610ea3565b905092915050565b6000806109c6836109f6565b9050600081670de0b6b3a7640000866109df9190610e1a565b6109e99190610ea3565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a3f57600080fd5b505afa158015610a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a779190610f61565b5050509150506402540be40081610a8e9190610fdc565b915050919050565b828054828255906000526020600020908101928215610b0f579160200282015b82811115610b0e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ab6565b5b509050610b1c9190610b20565b5090565b5b80821115610b39576000816000905550600101610b21565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b6d82610b42565b9050919050565b610b7d81610b62565b8114610b8857600080fd5b50565b600081359050610b9a81610b74565b92915050565b600060208284031215610bb657610bb5610b3d565b5b6000610bc484828501610b8b565b91505092915050565b6000819050919050565b610be081610bcd565b82525050565b6000602082019050610bfb6000830184610bd7565b92915050565b610c0a81610b62565b82525050565b6000602082019050610c256000830184610c01565b92915050565b6000819050919050565b6000610c50610c4b610c4684610b42565b610c2b565b610b42565b9050919050565b6000610c6282610c35565b9050919050565b6000610c7482610c57565b9050919050565b610c8481610c69565b82525050565b6000602082019050610c9f6000830184610c7b565b92915050565b610cae81610bcd565b8114610cb957600080fd5b50565b600081359050610ccb81610ca5565b92915050565b600060208284031215610ce757610ce6610b3d565b5b6000610cf584828501610cbc565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d6782610bcd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d9a57610d99610d2d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610def600083610dd4565b9150610dfa82610ddf565b600082019050919050565b6000610e1082610de2565b9150819050919050565b6000610e2582610bcd565b9150610e3083610bcd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e6957610e68610d2d565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610eae82610bcd565b9150610eb983610bcd565b925082610ec957610ec8610e74565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ef381610ed4565b8114610efe57600080fd5b50565b600081519050610f1081610eea565b92915050565b6000819050919050565b610f2981610f16565b8114610f3457600080fd5b50565b600081519050610f4681610f20565b92915050565b600081519050610f5b81610ca5565b92915050565b600080600080600060a08688031215610f7d57610f7c610b3d565b5b6000610f8b88828901610f01565b9550506020610f9c88828901610f37565b9450506040610fad88828901610f4c565b9350506060610fbe88828901610f4c565b9250506080610fcf88828901610f01565b9150509295509295909350565b6000610fe782610f16565b9150610ff283610f16565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561103157611030610d2d565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561106e5761106d610d2d565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110ab576110aa610d2d565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110e8576110e7610d2d565b5b82820290509291505056fea26469706673582212204b89573d6e0454d29fb027cc6a78a127f2e44ae3ca2695d311bfaface6e63f4464736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c80639e87a5cd116100595780639e87a5cd1461014d578063ac8b521814610178578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101b757610099565b80630343fb25146100a35780633ccfd60b146100e05780636b69a592146100f7578063893d20e81461012257610099565b36610099576100976101f4565b005b6100a16101f4565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610ba0565b610313565b6040516100d79190610be6565b60405180910390f35b3480156100ec57600080fd5b506100f561035c565b005b34801561010357600080fd5b5061010c610645565b6040516101199190610be6565b60405180910390f35b34801561012e57600080fd5b50610137610652565b6040516101449190610c10565b60405180910390f35b34801561015957600080fd5b5061016261067a565b60405161016f9190610c8a565b60405180910390f35b34801561018457600080fd5b5061018d6106a4565b60405161019a9190610be6565b60405180910390f35b6101ab6101f4565b005b6101b56106e0565b005b3480156101c357600080fd5b506101de60048036038101906101d99190610cd1565b610942565b6040516101eb9190610c10565b60405180910390f35b6802b5e3af16b1880000610233600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461098990919063ffffffff16565b1161026a576040517ff14a42b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e1576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104865760006001600080848154811061040a57610409610cfe565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808061047e90610d5c565b9150506103e4565b50600067ffffffffffffffff8111156104a2576104a1610da5565b5b6040519080825280602002602001820160405280156104d05781602001602082028036833780820191505090505b50600090805190602001906104e6929190610a96565b503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561052d573d6000803e3d6000fd5b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505090508061059e576040517f81063e5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff16476040516105c490610e05565b60006040518083038185875af1925050503d8060008114610601576040519150601f19603f3d011682016040523d82523d6000602084013e610606565b606091505b5050905080610641576040517f3204506f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006106db6802b5e3af16b1880000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166109ba565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610765576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156107e857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161079e575b5050505050905060005b815181101561086d5760006001600084848151811061081457610813610cfe565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808061086590610d5c565b9150506107f2565b50600067ffffffffffffffff81111561088957610888610da5565b5b6040519080825280602002602001820160405280156108b75781602001602082028036833780820191505090505b50600090805190602001906108cd929190610a96565b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505090508061093e576040517f81063e5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b600080828154811061095757610956610cfe565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000670de0b6b3a76400008361099e846109f6565b6109a89190610e1a565b6109b29190610ea3565b905092915050565b6000806109c6836109f6565b9050600081670de0b6b3a7640000866109df9190610e1a565b6109e99190610ea3565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a3f57600080fd5b505afa158015610a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a779190610f61565b5050509150506402540be40081610a8e9190610fdc565b915050919050565b828054828255906000526020600020908101928215610b0f579160200282015b82811115610b0e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ab6565b5b509050610b1c9190610b20565b5090565b5b80821115610b39576000816000905550600101610b21565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b6d82610b42565b9050919050565b610b7d81610b62565b8114610b8857600080fd5b50565b600081359050610b9a81610b74565b92915050565b600060208284031215610bb657610bb5610b3d565b5b6000610bc484828501610b8b565b91505092915050565b6000819050919050565b610be081610bcd565b82525050565b6000602082019050610bfb6000830184610bd7565b92915050565b610c0a81610b62565b82525050565b6000602082019050610c256000830184610c01565b92915050565b6000819050919050565b6000610c50610c4b610c4684610b42565b610c2b565b610b42565b9050919050565b6000610c6282610c35565b9050919050565b6000610c7482610c57565b9050919050565b610c8481610c69565b82525050565b6000602082019050610c9f6000830184610c7b565b92915050565b610cae81610bcd565b8114610cb957600080fd5b50565b600081359050610ccb81610ca5565b92915050565b600060208284031215610ce757610ce6610b3d565b5b6000610cf584828501610cbc565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d6782610bcd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d9a57610d99610d2d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610def600083610dd4565b9150610dfa82610ddf565b600082019050919050565b6000610e1082610de2565b9150819050919050565b6000610e2582610bcd565b9150610e3083610bcd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e6957610e68610d2d565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610eae82610bcd565b9150610eb983610bcd565b925082610ec957610ec8610e74565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ef381610ed4565b8114610efe57600080fd5b50565b600081519050610f1081610eea565b92915050565b6000819050919050565b610f2981610f16565b8114610f3457600080fd5b50565b600081519050610f4681610f20565b92915050565b600081519050610f5b81610ca5565b92915050565b600080600080600060a08688031215610f7d57610f7c610b3d565b5b6000610f8b88828901610f01565b9550506020610f9c88828901610f37565b9450506040610fad88828901610f4c565b9350506060610fbe88828901610f4c565b9250506080610fcf88828901610f01565b9150509295509295909350565b6000610fe782610f16565b9150610ff283610f16565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561103157611030610d2d565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561106e5761106d610d2d565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110ab576110aa610d2d565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110e8576110e7610d2d565b5b82820290509291505056fea26469706673582212204b89573d6e0454d29fb027cc6a78a127f2e44ae3ca2695d311bfaface6e63f4464736f6c63430008080033",
  "devdoc": {
    "author": "Mattia Papa",
    "details": "It implements PriceConverter as library",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is a sample of a funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 67,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 70,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}